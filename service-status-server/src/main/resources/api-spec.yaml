swagger: '2.0'
info:
  description: >-
    This is a sample server Petstore server.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
    #swagger](http://swagger.io/irc/).      For this sample, you can use the api
    key `special-key` to test the authorization     filters.
  version: 1.0.0
  title: Lozzikit Status Service
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: MIT
    url: 'https://mit-license.org/'
basePath: /v2
tags:
  - name: Service
    description: Manage your services
  - name: Maintenance
    description: Define when a serviceEntity will be unavailable
  - name: Incident
    description: When something goes bad with a serviceEntity
schemes:
  - http
paths:
  /services:
    post:
      tags:
        - Service
      summary: Add a serviceEntity to monitor
      operationId: addService
      consumes:
        - application/json
      parameters:
        - name: serviceEntity
          in: body
          description: Service object that needs to be added to the status page
          required: true
          schema:
            $ref: '#/definitions/NewService'
      responses:
        '201':
          description: OK
        '422':
          description: Invalid payload
          schema:
            type: array
            items:
              $ref: '#/definitions/ApiValidationError'
    get:
      tags:
        - Service
      summary: Get a list of all services
      operationId: getServices
      produces:
        - application/json
      parameters:
        - name: expand
          in: query
          description: Define if nested object of the serviceEntity are included in the response
          type: string
          enum:
            - history
      responses:
        '200':
          description: Return the list of services
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
  '/services/{id}':
    get:
      tags:
        - Service
      summary: Get details of a serviceEntity
      operationId: getServiceEntity
      parameters:
        - name: id
          in: path
          description: ID of serviceEntity to update
          required: true
          type: string
          format: uuid
        - name: expand
          in: query
          description: Define if nested object of the serviceEntity are included in the response
          type: string
          enum:
            - status
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Service'
    put:
      tags:
        - Service
      summary: Update an existing serviceEntity
      description: ''
      operationId: updateService
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of serviceEntity to update
          required: true
          type: string
          format: uuid
        - in: body
          name: serviceEntity
          description: Service object that needs to be modified
          required: true
          schema:
            $ref: '#/definitions/NewService'
      responses:
        '201':
          description: OK
        '404':
          description: Not found
        '422':
          description: Invalid payload
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
    delete:
      tags:
        - Service
      summary: Delete an existing serviceEntity
      operationId: deleteService
      parameters:
        - name: id
          in: path
          description: ID of serviceEntity to delete
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: OK
        '404':
          description: Not found
  '/services/{id}/incidents':
    post:
      tags:
        - Incident
      summary: Create a new incidentEntity for this serviceEntity
      operationId: addIncident
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the serviceEntity
          required: true
          type: string
          format: uuid
        - name: incidentEntity
          in: body
          description: Incident object to be added to the status page
          required: true
          schema:
           $ref: '#/definitions/NewIncident'
      responses:
        '201':
          description: Creation successful
        '404':
          description: Service not found
        '422':
          description: Invalid payload
  '/services/{id}/incidents/{incidentId}':
    post:
      tags:
        - Incident
      summary: Add an update to an incidentEntity
      operationId: addIncidentUpdate
      consumes:
        - application/json
      parameters:
        - name: incidentUpdate
          in: body
          description: Incident update to be added to the incidentEntity
          required: true
          schema: 
            $ref: '#/definitions/IncidentUpdate'
        - name: id
          in: path
          description: ID of the serviceEntity
          required: true
          type: string
          format: uuid
        - name: incidentId
          in: path
          description: ID of the incidentEntity to update
          required: true
          type: string
          format: uuid
      responses:
        '201':
          description: Creation successful
        '404':
          description: Not found
        '422':
          description: Invalid payload
    get:
      tags:
        - Incident
      summary: Get details of an incidentEntity
      operationId: getIncidentDetails
      produces:
        - application/json
      parameters:
      responses:
        '200':
          description: Return the incidentEntity
          schema:
              $ref: '#/definitions/Incident'
        '404':
          description: Not found


          #  '/services/{id}/maintenances':
          #    post:
          #      tags:
          #        - Maintenance
          #      summary: Add a schedule maintenance
          #      operationId: newMaintenance
          #      consumes:
          #        - application/json
          #      parameters:
          #        - name: serviceEntity
          #          in: body
          #          description: Maintenance object that needs to be added to the status page
          #          required: true
          #          schema:
          #            $ref: '#/definitions/NewMaintenance'
          #        - name: id
          #          in: path
          #          description: ID of serviceEntity
          #          required: true
          #          type: string
          #          format: uuid
          #      responses:
          #        '201':
          #          description: Creation successful
          #        '405':
          #          description: Invalid input
          #    get:
          #      tags:
          #        - Maintenance
          #      summary: Get maintenance for a given serviceEntity
          #      operationId: getMaintenance
          #      produces:
          #        - application/json
          #      parameters:
          #        - name: state
          #          in: query
          #          description: status of the maintenances to fetch
          #          type: string
          #          enum:
          #            - upcoming
          #            - past
          #      responses:
          #        '200':
          #          description: Return the list of maintenances for the given serviceEntity
          #          schema:
          #            $ref: '#/definitions/Maintenance'
          #  '/services/{id}/maintenances/{id}':
          #    get:
          #      tags:
          #        - Maintenance
          #      summary: Get details of a serviceEntity
          #      parameters:
          #        - name: id
          #          in: path
          #          description: ID of serviceEntity to update
          #          required: true
          #          type: string
          #          format: uuid
          #        - name: expand
          #          in: query
          #          description: Define if nested object of the serviceEntity are included in the response
          #          type: string
          #          enum:
          #            - status
          #      responses:
          #        '200':
          #          description: Successful response
          #          schema:
          #            $ref: '#/definitions/Service'
definitions:
  ApiValidationError:
    type: object
    properties:
      field:
        type: string
      error:
        type: string
      rejectedValue:
        type: object
    required:
      - field
      - error
  ApiError:
    type: object
    properties:
      message:
        type: string
    required:
      - message
  NewService:
    type: object
    properties:
      name:
        type: string
        minLength: 3
        maxLength: 50
      description:
        type: string
        description: A short description of what the serviceEntity does
        minLength: 1
        maxLength: 250
      url:
        type: string
        format: url
      port:
        type: integer
        format: int32
        minimum: 1
        maximum: 65535
      interval:
        type: integer
        format: int32
        minimum: 5
        description: The interval in minutes at which the status will be check
    required:
      - name
      - url
      - port
      - interval
  NewIncident:
    type: object
    properties:
      title:
        type: string
      IncidentUpdate:
        $ref: '#/definitions/IncidentUpdate'
    required:
      - titre
      - IncidentUpdate
  Incident:
    type: object
    properties:
      title:
        type: string
      incidents:
        type: array
        items:
          $ref: '#/definitions/IncidentUpdate'
  IncidentUpdate:
    type: object
    properties:
      IncidentType:
        $ref: '#/definitions/IncidentType'
      message:
        type: string
    required:
      - IncidentType
      - message
  IncidentType:
    type: enum
    length: 13
    values: ['resolved', 'issue','retroactive','investigating','maintenance','scheduled','monitoring','update']
  Service:
    type: object
    allOf:
      - $ref: '#/definitions/NewService'
      - properties:
          location:
            type: string
          lastStatus:
            $ref: '#/definitions/Status'
          statuses:
            type: array
            items:
              $ref: '#/definitions/Status'
  Status:
    type: object
    properties:
      updateAt:
        type: string
        format: date-time
      httpStatus:
        type: integer
        format: int32
      status:
        type: string
        enum:
          - available
          - unavailable
          - down

            #  NewMaintenance:
            #    type: object
            #    properties:
            #      serviceEntity:
            #        type: string
            #        format: uuid
            #      title:
            #        type: string
            #      description:
            #        type: string
            #      beginAt:
            #        type: string
            #        format: date-time
            #      endAt:
            #        type: string
            #        format: date-time
            #  Maintenance:
            #    type: object
            #    allOf:
            #      - $ref: '#/definitions/NewMaintenance'
            #      - properties:
            #          location:
            #            type: string
            #            description: uri to access the maintenance
            #          serviceEntity:
            #            type: string
            #            format: uuid
            #          title:
            #            type: string
            #          description:
            #            type: string
            #          beginAt:
            #            type: string
            #            format: date-time
            #          endAt:
            #            type: string
            #            format: date-time
