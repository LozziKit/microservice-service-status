swagger: '2.0'
info:
  version: 1.0.0
  title: Lozzikit Status Service
  contact:
    email: michael.spierer@heig-vd.ch
    email: benoit.gianinetti@heig-vd.ch
    email: colin.lavanchy@heig-vd.ch
    email: edward.ransome@heig-vd.ch
  license:
    name: MIT
    url: 'https://mit-license.org/'
basePath: /v1
tags:
  - name: Service
    description: Manage your services
  - name: Incident
    description: When something goes bad with a service
schemes:
  - http
paths:
  /services:
    post:
      tags:
        - Service
      summary: Add a service to monitor
      operationId: addService
      consumes:
        - application/json
      parameters:
        - name: service
          in: body
          description: Service object that needs to be added to the status page
          required: true
          schema:
            $ref: '#/definitions/NewService'
      responses:
        '201':
          description: OK
        '422':
          description: Invalid payload
          schema:
            type: array
            items:
              $ref: '#/definitions/ApiValidationError'
    get:
      tags:
        - Service
      summary: Get a list of all services
      operationId: getServices
      produces:
        - application/json
      responses:
        '200':
          description: Return the list of services
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
  '/services/{id}':
    get:
      tags:
        - Service
      summary: Get details of a service
      operationId: getService
      parameters:
        - name: id
          in: path
          description: ID of service to update
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Service'
    put:
      tags:
        - Service
      summary: Update an existing service
      description: ''
      operationId: updateService
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of service to update
          required: true
          type: string
          format: uuid
        - in: body
          name: service
          description: Service object that needs to be modified
          required: true
          schema:
            $ref: '#/definitions/NewService'
      responses:
        '201':
          description: OK
        '404':
          description: Not found
        '422':
          description: Invalid payload
          schema:
            type: array
            items:
              $ref: '#/definitions/Service'
    delete:
      tags:
        - Service
      summary: Delete an existing service
      operationId: deleteService
      parameters:
        - name: id
          in: path
          description: ID of service to delete
          required: true
          type: string
          format: uuid
      responses:
        '204':
          description: OK
        '404':
          description: Not found
  '/services/{id}/history':
    get:
      tags:
        - Service
      summary: get the status history of a service
      operationId: getHistory
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the service
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: list of status of a service
          schema:
            type: array
            items:
              $ref: '#/definitions/Status'
        '404':
          description: Not found
  '/services/{idService}/incidents':
    post:
      tags:
        - Incident
      summary: Create a new incident for this service
      operationId: addIncident
      consumes:
        - application/json
      parameters:
        - name: idService
          in: path
          description: ID of the service
          required: true
          type: string
          format: uuid
        - name: newIncident
          in: body
          description: Incident object to be added to the status page
          required: true
          schema:
           $ref: '#/definitions/NewIncident'
      responses:
        '201':
          description: Creation successful
        '404':
          description: Service not found
        '422':
          description: Invalid payload
    get:
      tags:
        - Incident
      summary: Get a list of all Incident of a service
      operationId: getIncidents
      produces:
        - application/json
      parameters:
        - name: idService
          in: path
          description: ID of the service
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Return the list of services
          schema:
            type: array
            items:
              $ref: '#/definitions/Incident'
        '404':
          description: Not found
  '/services/{idService}/incidents/{idIncident}':
    post:
      tags:
        - Incident
      summary: Add an update to an incident
      operationId: addIncidentUpdate
      consumes:
        - application/json
      parameters:
        - name: update
          in: body
          description: Incident update to be added to the incident
          required: true
          schema: 
            $ref: '#/definitions/IncidentUpdate'
        - name: idService
          in: path
          description: ID of the service
          required: true
          type: string
          format: uuid
        - name: idIncident
          in: path
          description: ID of the incident to update
          required: true
          type: string
          format: uuid
      responses:
        '201':
          description: Creation successful
        '404':
          description: Not found
        '422':
          description: Invalid payload
    get:
      tags:
        - Incident
      summary: Get details of an incident
      operationId: getIncidentDetails
      produces:
        - application/json
      parameters:
        - name: idService
          in: path
          description: ID of the service
          required: true
          type: string
          format: uuid
        - name: idIncident
          in: path
          description: ID of the incidents to get
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Return the incident
          schema:
              $ref: '#/definitions/Incident'
        '404':
          description: Not found
definitions:
  ApiValidationError:
    type: object
    properties:
      field:
        type: string
      error:
        type: string
      rejectedValue:
        type: object
    required:
      - field
      - error
  ApiError:
    type: object
    properties:
      message:
        type: string
    required:
      - message
  NewService:
    type: object
    properties:
      name:
        type: string
        minLength: 3
        maxLength: 50
      description:
        type: string
        description: A short description of what the service does
        minLength: 1
        maxLength: 250
      url:
        type: string
        description: the url of the service. It MUST be in the format of a URL. A port can be specified.
        format: url
      interval:
        type: integer
        format: int32
        minimum: 5
        description: The interval in minutes at which the status will be check
    required:
      - name
      - url
      - interval
  NewIncident:
    type: object
    properties:
      title:
        type: string
      type:
        $ref: '#/definitions/IncidentType'
      message:
        type: string
    required:
      - title
      - type
  Incident:
    type: object
    properties:
      title:
        type: string
      location:
        type: string
      updates:
        type: array
        items:
          $ref: '#/definitions/IncidentUpdate'
    required:
      - title
      - updates
  IncidentUpdate:
    type: object
    properties:
      type:
        $ref: '#/definitions/IncidentType'
      message:
        type: string
    required:
      - type
  IncidentType:
    type: string
    enum:
      - 'resolved'
      - 'issue'
      - 'retroactive'
      - 'investigating'
      - 'maintenance'
      - 'scheduled'
      - 'monitoring'
      - 'update'
  Service:
    type: object
    allOf:
      - $ref: '#/definitions/NewService'
      - properties:
          location:
            type: string
          lastStatus:
            $ref: '#/definitions/Status'
  Status:
    type: object
    properties:
      updatedAt:
        type: string
        format: date-time
      httpStatus:
        type: integer
        format: int32
      state:
        type: string
        enum:
          - available
          - unavailable
          - down
    required:
      - httpStatus
      - state
